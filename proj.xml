<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="proj.xsl"?>
<projects>
  <proj>
    <title>Nostrum Magica</title>
    <tagline>Immersive Spell Crafting Minecraft Mod</tagline>
    <classification>Hobby</classification>
    <url>http://www.github.com/dove-bren/NostrumMagica</url>
    <descs>
      <desc>Large content mod for Minecraft</desc>
      <desc>Minecraft mod implemented using the Forge modding API</desc>
      <desc>Allows players to create complex spells one component at a time</desc>
      <desc>Large research tree guides progression through the mod and unlocks new items, tools, and progression mechanics</desc>
      <desc>Procedurally generated dungeons in the overworld hide large bosses or mysterious portals to a new world</desc>
      <desc>Players level up and progress through the instanced, challenging Sorcery Dimension</desc>
    </descs>
    <tags>
      <tag>Minecraft</tag>
      <tag>Mod</tag>
      <tag>Java</tag>
      <tag>Magic</tag>
      <tag>Content</tag>
      <tag>Progression</tag>
    </tags>
    <img>images/nostrummagica_8.png</img>
    <longdesc>
    Nostrum Magica brings magical adventure to Minecraft. Players explore dungeons filled with magic and puzzles,
    unlock components for crafting spells, perform large scale crafting rituals, fight challenging bosses, tame fabled
    beasts, and explore a large research tree.
    </longdesc>
    <fulldesc>
      <p>
      Nostrum Magica is a Minecraft mod that adds magic to Minecraft. Players find dungeons in the overworld, explore them by solving
      puzzles and fighting monsters, and travel to a new Sorcery dimension. Through this dimension, they unlock magic and begin their journey
      to unlock new tools, make more and more advanced spells, and face new challenges.
      </p>
      <p>
      Nostrum Magica was inspired by the Ars Magica II Minecraft mod that ended up being abandoned before it was finished. Like Ars Magica II,
      Nostrum lets the player create the spells they want to make by presenting spell components and letting players pick and choose and sequence
      the components to make a spell that does something unique.
      </p>
      <p>
      Spells are made from spell triggers and spell effects. Each effect is described by one spell shape (the 'who'), an element, and an optional 'alteration.'
      By default, spell effects made of an element and no alteration do damage in that element's type. Alterations change the effect to a unique effect depending
      on the element and alteration combo. In total, there are 16 different spell triggers, 4 different shapes, 7 elements, and 8 alterations. That means there
      are 52 different effects a single spell effect could have. Because spells can have up to 16 different components, there are more than 2.5 x 10^36
      spells.
      </p>
      <p>
      In addition to complex spell crafting, Nostrum adds new player characteristics like mana, mana regen rate, spell cost mitigation,
      reagent cost mitigation, resistance to magic and different magical elements, and more. Players pick how they want their character to progress and
      what attributes they want to prioritize based on how they want to play. As they play, they gain more mana to cast more powerful spells.
      </p>
      <p>
      A big focus of Nostrum Magica is progression. The first way players experience meaningful progression in Nostrum Magica is by leveling themselves up.
      Casting spells awards xp which builds towards advancing the player's magical level. Leveling awards skill points that the player can choose how to allocate
      between three major attributes -- Control, Finesse, and Technique. These attributes govern what types of spells players can cast. As they allocate these
      points, they also progress along a large attribute glyph, where nodes require certain attributes and levels before being attained. On this same glyph,
      players unlock alterations which allows them to add new spell effects to their spells.
      </p>
      <p>
      While casting spells and leveling up themselves, players make many trips into the Sorcery dimension to progress in a hand-crafted
      and instanced (each player has their own) dungeon to unlock more and more magical spell components. As they make their way further and further
      into the dungeon, they fight foes and are challenged with puzzles that increase in difficulty. Many of the puzzles require careful observation and traversal,
      while others demand clever use of different spell components.
      </p>
      <p>
      The third primary progression tracks in Nostrum Magica is the research tree. As players interact with the world, they are awarded lore points that let them
      unlock new nodes in the research tree. Nodes become visible when players reach adjacent nodes or satisfy any criteria for the node to be purchased -- like
      experiencing teleportation for the first time to unlock a research item about mark and recall. The research tree pairs with the advanced crafting system
      Nostrum Magica adds (called Rituals in game) to challenge the players to gather materials and craft powerful weapons and tools.
      </p>
      <p>
      Nostrum Magica has integrations with several other popular Minecraft mods including JEI, EnderIO, Baubles, and Botania. Additionally, it exposes several APIs
      itself so that other mods (included dedicated Nostrum Magica add-on mods) can add their own custom content.
      </p>
      <p> 
      </p>
      <p>
      NostrumMagica is currently in version 1.8.0 and works with Minecraft 1.12.2. It currently has two optional add-ons:<br />
      <a href="project-page.php?page=nostrumaetheria">Nostrum Aetheria</a> which adds an energy mechanic called Aether, and<br />
      <a href="project-page.php?page=nostrumfairies">Quest Maker</a> which adds mysterious fey that provide automation to friendly mages!
      </p>
    </fulldesc>
    <urltag>nostrummagica</urltag>
    <screenshots>
      <screenshot>
        <src>images/nostrummagica_1.png</src>
        <tag>NostrumMagica</tag>
        <alt>Magic flower decorate the world</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_3.png</src>
        <tag>NostrumMagica</tag>
        <alt>Mysterious new ores lie down below</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_4.png</src>
        <tag>NostrumMagica</tag>
        <alt>Strange dungeons spawn naturally in the world</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_5.png</src>
        <tag>NostrumMagica</tag>
        <alt>Typical dungeon opening room</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_6.png</src>
        <tag>NostrumMagica</tag>
        <alt>Dungeons provide unique minecraft adventure challenges</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_7.png</src>
        <tag>NostrumMagica</tag>
        <alt>Lots of loot hidden in the overworld dungeons</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_8.png</src>
        <tag>NostrumMagica</tag>
        <alt>Deep in some dungeons lies a portal...</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_9.png</src>
        <tag>NostrumMagica</tag>
        <alt>Small to large dungeon rooms with mysterious origins</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_10.png</src>
        <tag>NostrumMagica</tag>
        <alt>Magical wisps spawn in the overworld</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_11.png</src>
        <tag>NostrumMagica</tag>
        <alt>Elemental Willos cause mayham to unsuspecting players</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_12.png</src>
        <tag>NostrumMagica</tag>
        <alt>Shadow dragons patrol the nether</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_13.png</src>
        <tag>NostrumMagica</tag>
        <alt>Sprites gleefully lift nearby entities to their doom in the nether</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_14.png</src>
        <tag>NostrumMagica</tag>
        <alt>Through the portal is the Sorcery Dimension</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_15.png</src>
        <tag>NostrumMagica</tag>
        <alt>Upon entering, four paths lead to unique dungeons</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_16.png</src>
        <tag>NostrumMagica</tag>
        <alt>Each section of the dungeon is sprawling</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_17.png</src>
        <tag>NostrumMagica</tag>
        <alt>Rooms vary from small challenge rooms to large puzzle rooms</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_18.png</src>
        <tag>NostrumMagica</tag>
        <alt>At the end of each section is a new shape component for your spells</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_19.png</src>
        <tag>NostrumMagica</tag>
        <alt>Each section of the dungeon is themed differently</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_20.png</src>
        <tag>NostrumMagica</tag>
        <alt>Solve puzzles to open the door and unlock new spell components</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_21.png</src>
        <tag>NostrumMagica</tag>
        <alt>Use new spell components to solve more challenging puzzles</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_22.png</src>
        <tag>NostrumMagica</tag>
        <alt>Keep your eye out for treasure as you explore</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_23.png</src>
        <tag>NostrumMagica</tag>
        <alt>Grand staircases lead up to challenging bosses</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_24.png</src>
        <tag>NostrumMagica</tag>
        <alt>Secrets are everywhere in the Sorcery Dimension</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_25.png</src>
        <tag>NostrumMagica</tag>
        <alt>Travel deep enough, and you might make new friends</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_26.png</src>
        <tag>NostrumMagica</tag>
        <alt>Use the Attribute Glyph to increase your magic characteristics</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_27.png</src>
        <tag>NostrumMagica</tag>
        <alt>Moving along the glyph requires allocating attribute points</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_28.png</src>
        <tag>NostrumMagica</tag>
        <alt>Where will your path take you?</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_29.png</src>
        <tag>NostrumMagica</tag>
        <alt>The research table guides you through Nostrum Magica</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_30.png</src>
        <tag>NostrumMagica</tag>
        <alt>Each research information on mechanics or new recipes and tools</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_31.png</src>
        <tag>NostrumMagica</tag>
        <alt>Unlock spell crafting, advanced crafting, new weapons, and more</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_32.png</src>
        <tag>NostrumMagica</tag>
        <alt>Each research page has many research items</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_33.png</src>
        <tag>NostrumMagica</tag>
        <alt>Research is divided into different tabs based on category</alt>
      </screenshot>
      <!--<screenshot>
        <src>images/nostrummagica_34.png</src>
        <tag>NostrumMagica</tag>
        <alt></alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_35.png</src>
        <tag>NostrumMagica</tag>
        <alt></alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_36.png</src>
        <tag>NostrumMagica</tag>
        <alt></alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_37.png</src>
        <tag>NostrumMagica</tag>
        <alt></alt>
      </screenshot>-->
      <screenshot>
        <src>images/nostrummagica_38.png</src>
        <tag>NostrumMagica</tag>
        <alt>Unlock useful tools like the Reagent Bag</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_39.png</src>
        <tag>NostrumMagica</tag>
        <alt>Research and attributes are unlocked by traveling to the Sorcery Dimension</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_40.png</src>
        <tag>NostrumMagica</tag>
        <alt>The 'home' menu provides useful info and guides</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_41.png</src>
        <tag>NostrumMagica</tag>
        <alt>View all the element and alteration combinations you've seen so far</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_42.png</src>
        <tag>NostrumMagica</tag>
        <alt>Dictate the effects of your spells with shapes, elements, and alterations</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_43.png</src>
        <tag>NostrumMagica</tag>
        <alt>Modify certain runes to change their parameters</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_44.png</src>
        <tag>NostrumMagica</tag>
        <alt>Modifying runes takes resources</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_45.png</src>
        <tag>NostrumMagica</tag>
        <alt>Sequence runes, supply reagents, pick an icon, and name it to create a spell</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_46.png</src>
        <tag>NostrumMagica</tag>
        <alt>View ritual recipes in the home menu</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_47.png</src>
        <tag>NostrumMagica</tag>
        <alt>Rituals vary from small, medium, and large</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_48.png</src>
        <tag>NostrumMagica</tag>
        <alt>Place items on altars and burn reagents to perform rituals</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_49.png</src>
        <tag>NostrumMagica</tag>
        <alt>Use magic to imbue items with characteristics of others</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_50.png</src>
        <tag>NostrumMagica</tag>
        <alt>Combine items in unique ways</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_51.png</src>
        <tag>NostrumMagica</tag>
        <alt>Use rituals to create powerful tools and equipment</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_52.png</src>
        <tag>NostrumMagica</tag>
        <alt>Use rituals to create powerful tools and equipment</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_53.png</src>
        <tag>NostrumMagica</tag>
        <alt>Explore Nostrum's powerful armor sets</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_54.png</src>
        <tag>NostrumMagica</tag>
        <alt>Each armor set has a different appearance</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_55.png</src>
        <tag>NostrumMagica</tag>
        <alt>Each armor set provides unique bonuses</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_56.png</src>
        <tag>NostrumMagica</tag>
        <alt>Gear up to confront powerful foes</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_57.png</src>
        <tag>NostrumMagica</tag>
        <alt>Soar through the air with the True elemental sets</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_58.png</src>
        <tag>NostrumMagica</tag>
        <alt>Tame young dragons to fly</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_59.png</src>
        <tag>NostrumMagica</tag>
        <alt>View and manage stats on tamed dragons</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_60.png</src>
        <tag>NostrumMagica</tag>
        <alt>Train up Arcane Wolves for powerful allies in battle</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_61.png</src>
        <tag>NostrumMagica</tag>
        <alt>Tamed dragons can sit like tamed wolves</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_2.png</src>
        <tag>NostrumMagica</tag>
        <alt>Arcane Wolves are larger and darker than normal wolves</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_62.png</src>
        <tag>NostrumMagica</tag>
        <alt>Arcane wolves can sit as well</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrummagica_63.png</src>
        <tag>NostrumMagica</tag>
        <alt>Even Arcane Wolves beg for food sometimes</alt>
      </screenshot>
    </screenshots>
  </proj>
  <proj>
    <title>Nostrum Aetheria</title>
    <tagline>Adds power mechanic to promote automation in Nostrum Magica</tagline>
    <classification>Hobby</classification>
    <url>http://www.github.com/dove-bren/NostrumAetheria</url>
    <descs>
      <desc>Minecraft Mod that adds power mechanic to Nostrum Magica</desc>
      <desc>Players spend resources to generate and store Aether</desc>
      <desc>Aether can be transported around and used to power machines</desc>
      <desc>Promotes puzzling through automating Aether production</desc>
    </descs>
    <tags>
      <tag>Minecraft</tag>
      <tag>Mod</tag>
      <tag>Java</tag>
      <tag>Automation</tag>
      <tag>Progression</tag>
    </tags>
    <img>images/nostrumaetheria_1.png</img>
    <longdesc>
    Nostrum Aetheria builds on Nostrum Magica to add the concept of Aether -- an intangible energy source.
    Players discover how to generate it and either hand-feed machines or solve challenges to automate its productions.
    Aether can be routed around to machines that require it to function.
    </longdesc>
    <fulldesc>
      <p>
      Nostrum Aetheria is an add-on to Nostrum Magica that lets players burn reagents to produce unaspected 'Aether' and store it in aether batteries.
      Players can transport this aether around with new tools to machines that need it to provide powerful effects. Players can also store aether in items
      and transport it in their inventory to power their handheld tools.
      </p>
      <p>
      Nostrum Aetheria is meant to be an add-on that other add-ons use. Aether provides a mechanic for other systems to specify an <em>upkeep cost</em>
      to keep using. This creates on central resource players can focus on creating and improving to pay for systems that are too powerful to have a one-time crafting
      cost.
      </p>
      <p>
      Generating aether is done by burning reagents in generators. Some reagents are easy to acquire (and even automate) like the growable mandrake and ginseng.
      Others are harder -- like Crystabloom and Black Pearl. This makes generating aether challenging to automate, because the easiest furnace to use requires <em>three
      different reagents</em> at the same time to produce any aether at all. Larger furnaces produce more aether per reagent, but require more and more (5 and 7) different
      reagents types to burn.
      </p>
      <p>
      In addition to adding the aether mechanic, Nostrum Aetheria adds several tools (including magical baubles) that use aether to provide nice effects. Players can equip a charm
      that uses Aether to provide a small flat reduction to damage, or can charge up pendants to cast spells without the need of reagents. If they produce enough aether and have
      enough resources, they can construct an Aether Infuser and Aether Lenses to increase crop growth, grant speed to players in an area, or even drill into the ground!
      </p>
      <p> 
      </p>
      <p>
      Nostrum Aetheria is currently in version 1.1.0 and works with Minecraft 1.12.2.
      </p>
    </fulldesc>
    <urltag>nostrumaetheria</urltag>
    <screenshots>
      <screenshot>
        <src>images/nostrumaetheria_1.png</src>
        <tag>NostrumAetheria</tag>
        <alt>Aether Furnace and Aether Battery</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrumaetheria_2.png</src>
        <tag>NostrumAetheria</tag>
        <alt>Aether Relays let aether flow wirelessly to other blocks</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrumaetheria_3.png</src>
        <tag>NostrumAetheria</tag>
        <alt>Aether Repairer repairing equipment using aether</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrumaetheria_4.png</src>
        <tag>NostrumAetheria</tag>
        <alt>Unlock generators, batteries, relays, and more with the Research Table</alt>
      </screenshot>
    </screenshots>
  </proj>
  <proj>
    <title>Nostrum Fairies</title>
    <tagline>Introduces magical Fey to minecraft which provide powerful automation</tagline>
    <classification>Hobby</classification>
    <url>http://www.github.com/dove-bren/NostrumFairies</url>
    <descs>
      <desc>Minecraft Mod that adds four types of Fey to Nostrum Magica</desc>
      <desc>Each type of fey has their own likes and dislikes, and can perform unique jobs</desc>
      <desc>Fey provide services from tree cutting to inventory management</desc>
    </descs>
    <tags>
      <tag>Minecraft</tag>
      <tag>Mod</tag>
      <tag>Java</tag>
      <tag>Automation</tag>
      <tag>Progression</tag>
    </tags>
    <img>images/nostrumfairies_2.png</img>
    <longdesc>
    Nostrum Fairies introduces the Fey -- Dwarves, elves, gnomes, and fairies -- to Nostrum Magica.
    Players can befriend them and exchange aether for their services.
    Automate wood gathering, farming, mining, crafting, and inventory management in your base with the Fey!
    </longdesc>
    <fulldesc>
      <p>
      Nostrum Fairies is a late-game addition to Nostrum Magica. As the player explores the world, they are attacked by Shadow Fey -- mysterious creatures
      with a shadowy form that attack them with magic arrows and knives. After become more powerful mages and defeating more shadow fey, players
      discover the tragedy of the shadow fey, and even can work to return the fey to their original forms. After doing this, players can befriend them and
      provide them places to live and Aether to live on in exchange for their services!
      </p>
      <p>
      There are four types of fey: Dwarves, Elves, Gnomes, and Fairies. Each looks very different than the others, and has their own home blocks. Each also provides
      a unique service. Dwarves are excellent crafters, builders, and miners, while Elves excel at working with wood and hunting; Gnomes make great farmers and love
      picking up items, while fairies are experts at delivering items to whoever needs them.
      </p>
      <p>
      Nostrum Fairies comes with its own large research tree (that builds on Nostrum Magica's) to guide the player through their journey from discovering the shadow fey to
      constructing places for the Fey to live. Players can pursue one or all of the fey's services and learn how to craft gems that alter how they work. They can befriend the fairies
      more personally through magical instruments and acquire friends for battle, constructing, and managing their inventory.
      </p>
      <p> 
      </p>
      <p>
      Nostrum Fairies is currently in version 1.1.0 and works with Minecraft 1.12.2.
      </p>
    </fulldesc>
    <urltag>nostrumfairies</urltag>
    <screenshots>
      <screenshot>
        <src>images/nostrumfairies_1.png</src>
        <tag>NostrumFairies</tag>
        <alt>Fey perform different tasks like chopping wood or crafting</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrumfairies_2.png</src>
        <tag>NostrumFairies</tag>
        <alt>Gnomes can farm while dwarves craft armor</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrumfairies_3.png</src>
        <tag>NostrumFairies</tag>
        <alt>Fairies can join you while you adventure</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrumfairies_4.png</src>
        <tag>NostrumFairies</tag>
        <alt>Nostrum Fairies' research tree has lots to offer</alt>
      </screenshot>
      <screenshot>
        <src>images/nostrumfairies_5.png</src>
        <tag>NostrumFairies</tag>
        <alt>Item logistics research tree</alt>
      </screenshot>
    </screenshots>
  </proj>
  <proj>
    <title>QuestManager</title>
    <tagline>MMORPG Framework for Minecraft</tagline>
    <classification>Hobby</classification>
    <url>http://www.github.com/dove-bren/QuestManager</url>
    <descs>
      <desc>Questing Framework for Minecraft</desc>
      <desc>Minecraft plugin implemented using the Spigot API</desc>
      <desc>Transforms game into MMORPG style experience, as created by the server administrator</desc>
      <desc>Server admins create quests, NPCs, items, rewards, shops, etc.</desc>
      <desc>Framework works through config files, meaning each server has their own unique experience</desc>
      <desc>Massive number of features, made completely configurable</desc>
    </descs>
    <tags>
      <tag>MMORPG</tag>
      <tag>Plugin</tag>
      <tag>Java</tag>
      <tag>Framework</tag>
      <tag>Spigot</tag>
      <tag>Config Files</tag>
      <tag>Massive</tag>
      <tag>Minecraft</tag>
    </tags>
    <img>images/questmanager_0.png</img>
    <longdesc>
    QuestManager allows Minecraft Servers to transform into fully-immersive MMORPGs of almost any style.
    QuestManager works entirely through config files, allowing almost anybody to create quests, NPCs, shops, spells,
    enemies, and more for a completely custom experience every time.
    </longdesc>
    <fulldesc>
      <p>
      QuestManager (QM) is a Minecraft Plugin that transforms the game from a sand-box game into a full-feature MMORPG. The plugin
      works by defining quests, which direct players to complete tasks for certain rewards. In addition, QM adds new ways to interact
      in order to remake the gameplay of Minecraft in a more direct fashion.
      </p>
      <p>
      In addition to outlining quests, QM allows creation of NPCs for a multitude of purposes (inns, shops, etc). It also provides
      interfaces for enemy creation (and spawning mechanics), player parties, skill systems, level-up progression, and more. When
      all of these assets come together, the game is truly transformed away from the creative game that Minecraft is into a
      player-centralized adventure MMORPG.
      </p>
      <p>
      The feature list of QM is large. What makes it truly powerful, however, is that QM runs completely from config. This means that
      the plugin by itself has no quests, NPCs, items, or progression. Instead, the plugin works as a framework with which server
      administrators create their own unique, custom MMORPG. Shifting the content to config also helps make QM easier to interact
      with, as no programming is required what-so-ever. Instead, interfacing with QM involves creating YAML config files in any
      text editor. The config files have been designed to be straightforward, so the most difficult part is creating worthwile
      content!
      </p>
      <p>
      Some of the biggest backend features are in the mechanics of the quests themselves. Quests are composed both of simple data --
      like the name of the quest -- and complex data -- like the quests that must be completed before the quest can be taken. Emphasis
      is placed on how expressive the quest creators can be. Due to this, quests can range from simple quests that can be repeated
      over and over again to long tirades that require a party, involve branching objectives, and can only be taken while a certain
      other quest is being taken. By expanding the possibilities of the quests, QM allows each and every adventure made completely
      unique.
      </p>
      <p>
      A big part of an RPG is progression. Your character is expected to grow and get better. This may come through growth of natural
      ability, improved equipment, or both. QM supports all three options, and leave their implementation completely up to the user.
      The user is responsible for creating all shops, specifying growth rate for stats and level-up experience, difficulty of enemies,
      the effective value for a player's money, and the items themselves. Because of this, progression can be specially tailored to the
      adventure, rather than the opposite.
      </p>
      <p>
      In conjunction with player progression, the user also specifies which skills can be used and how they progress. This includes
      creating crafts and materials that can be made, the rate at which xp is gained and required to level a skill up, and how useful
      the results of the skills are. Like everything else in QM, skills are made to be configured.
      </p>
      <p> 
      </p>
      <p>
      QuestManager is currently in version 1.4, and was last updated August, 2016. Some related works are 
      <a href="project-page.php?page=irontale">Iron Tale</a>, which is a medieval MMORPG designed using QM, and
      <a href="project-page.php?page=questmaker">Quest Maker</a>, which is a small graphical application that helps further simplify
      creating QM configs.
      </p>
    </fulldesc>
    <urltag>questmanager</urltag>
    <screenshots>
      <screenshot>
        <src>images/questmanager_0.png</src>
        <tag>QuestManager</tag>
        <alt>Quest Log</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_31.png</src>
        <alt>Skillbook With Levels</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_1.png</src>
        <tag>QuestManager</tag>
        <alt>Player Stats and Options</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_7.png</src>
        <tag>QuestManager</tag>
        <alt>Interact With NPCs</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_8.png</src>
        <tag>QuestManager</tag>
        <alt>Sleep At Inns</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_15.png</src>
        <tag>QuestManager</tag>
        <alt>Shop Menu</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_17.png</src>
        <tag>QuestManager</tag>
        <alt>NPC Crafts and Trades</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_2.png</src>
        <tag>QuestManager</tag>
        <alt>Forge Metals</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_3.png</src>
        <tag>QuestManager</tag>
        <alt>Strike Metal While It's Hot</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_4.png</src>
        <tag>QuestManager</tag>
        <alt>View Available Recipes</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_5.png</src>
        <tag>QuestManager</tag>
        <alt>Each Recipe Described Process</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_6.png</src>
        <tag>QuestManager</tag>
        <alt>Mine For Ores With Mining</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_9.png</src>
        <tag>QuestManager</tag>
        <alt>Fishing</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_10.png</src>
        <tag>QuestManager</tag>
        <alt>Fishing Minigame</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_11.png</src>
        <tag>QuestManager</tag>
        <alt>Quality-Tagged Resources</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_12.png</src>
        <tag>QuestManager</tag>
        <alt>Cooking's Oven Minigame</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_14.png</src>
        <tag>QuestManager</tag>
        <alt>Cooking's Mixing Interface</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_23.png</src>
        <tag>QuestManager</tag>
        <alt>See Your Damage</alt>
      </screenshot>
    </screenshots>
  </proj>
  <proj>
    <title>Personal Website/Demo Reel</title>
    <url>http://www.github.com/dove-bren/dove-bren.github.io</url>
    <classification>Hobby</classification>
    <tagline>Dynamic Demo Reel Website</tagline>
    <descs>
      <desc>Website used to collect and showcase projects and achievements</desc>
      <desc>Uses back-end data for dynamic webpages instead of static HTML</desc>
      <desc>HTML, CSS, PHP, Javascript, and XSLT</desc>
      <desc>Uses no libraries; everything built from the ground up</desc>
    </descs>
    <tags>
      <tag>Web</tag>
      <tag>PHP</tag>
      <tag>JavaScript</tag>
      <tag>CSS</tag>
      <tag>HTML</tag>
      <tag>XSLT</tag>
      <tag>XML</tag>
      <tag>Demo</tag>
      <tag>JS</tag>
      <tag>dynamic</tag>
      <tag>Website</tag>
      <tag>Webpage</tag>
    </tags>
    <img>images/website.png</img>
    <urltag>personalwebpage</urltag>
    <longdesc>
      My Demo Reel website serves to showcase many of the projects I've completed and provide some description of them. Projects are
      documented with descriptions, screenshots, and the source (where available). In addition, a CV and personal statement are
      presented.
    </longdesc>
    <fulldesc>
    <p>
    I started work on this Demo Reel website in order to showcase projects I've completed that lie outside of my professional
    experience. Despite working to pay my way through college, I've been actively engaged in personal projects in most of my
    free time. These projects range from trivial helper command-line programs to mods to exploratory excercises like writing
    a bitmap codec.
    </p>
    <p>
    Much of my experience comes from these personal projects. In order to provide some description of each of the projects, I list
    them here.
    </p>
    <p>
    This website was created completely from hand. No libraries (save standard libraries like PHP's xsl library) were used. The website
    is a mixture of server-side data (XML and XSLT proxied by PHP), server-side formatting (like in the screenshots page), and
    client-side functionallity. It uses HTML, JavaScript, PHP, XML/XSLT, and CSS. Data about projects and professional experience
    found throughout the website (screenshots, resume, projects page) is created based off of server-side data. This centralized data
    source makes it easy to add data and have the website correctly adjust.
    </p>
    <p>
    I chose to use XSLT to format the data (and XML to store it) purely for the experience. Instead of using an MySQL database and PHP,
    I wanted to work with something I knew less about. While working with it, however, I found it easier to interface with the data
    because it was stored as a plain-text text file. This made making small touch-ups much more straightforward and helped expedite
    the process of adding data. Additionally, adding more data is as simple as editing the file. Moving the website to a different
    server was also much easier, as I didn't have to spend any time at all setting up the database, setting up credentials, and
    making any updates to the backend that might have been needed. Of course, this was acceptable only because the data was not
    sensitive or confidential.
    </p>
    <p>
    Originally, I was hosting the website on my GitHub io page. Because GitHub io pages are static, however, I was unable to use any
    server-side processing. Early versions of the website were made entirely with HTML, XSLT, and Javascript -- with the JavaScript
    fetching the XML and performing the transformation client side. Because the data wasn't sensitive, this worked fine. However,
    implementations of the individual project pages and the screenshots page in JavaScript seemed sloppy to me. In th end, I decided
    to move the page somewhere where I could use server-side processing of data and simply provide clients with already-formatted
    pages.
    </p>
    <p>
    An area I really struggle in is in presentation. There is no greater example than creating color schemes -- like the one for this
    website. I spent some time trying to decide on a base color, and then using palette websites to find colors that worked well with
    it. Figuring out which colors to use, and how exactly to lay out each page have been big challenges.
    </p>
    </fulldesc>
  </proj>
  <proj>
    <title>Iron Tale</title>
    <tagline>Medieval MMORPG</tagline>
    <classification>Hobby</classification>
    <descs>
      <desc>Medieval themed world with <em>197</em> quests</desc>
      <desc>Hundreds of NPCs</desc>
      <desc>Magic System</desc>
      <desc>Balanced and Worthwhile Crafting System</desc>
      <desc>Massive World with over a hundred types of enemies</desc>
      <desc>Gigantic main story and a whole slew of side quests</desc>
      <desc>Over 100 hours of gameplay</desc>
    </descs>
    <tags>
      <tag>MMORPG</tag>
      <tag>Medieval</tag>
      <tag>Spigot</tag>
      <tag>QuestManager</tag>
      <tag>Minecraft</tag>
    </tags>
    <img>images/questmanager_front.png</img>
    <longdesc>Iron Tale is a Medieval MMORPG implemented using 
      <a href="project-page.php?page=questmanager">QuestManager</a>. Iron Tale has 197 quests, hundreds of NPCs,
      fine-tuned skills and crafting, and so much more. Targetted to a more hardcore audience, Iron Tale has no
      shortage of challenges for even the most experiened player.
    </longdesc>
    <fulldesc>
      <p>
      Iron Tale is a Medieval MMORPG made using <a href="project-page.php?page=questmanager">QuestManager</a>. It is a combination
      of mechanics made using QuestMaker, a hand-created map, a unique story, and a Medieval texture pack. The game focuses on
      player progression, and is geared towards experienced players who want a challenge.
      </p>
      <p>
      Iron Tale starts off by letting the player choose what to do. After a small tutorial space, the player is brought into the
      wilderness and left to do what they want. This usually involves finding one of the 4 starting cities that surround the
      starting location, as the first obstacle the player will face is their hunger level. In Iron Tale, food is one of the most
      present dangers throughout the entire game. In order to get food, players must complete quests (either for food or money to
      purchase food) or take up crafting. After this, however, the player is free to play the game in whichever fashion they choose.
      It's entirely possible to stay in the cities and train in crafting. Crafters can provide themselves with goods, or trade their
      crafts to other players. 
      </p>
      <p>
      Should a player choose instead to pursue combat, they again face a large number of choices. Minecraft defaulty has a small
      variety of weapons. Iron Tale takes these and helps diversify them by creating it's own material scale. Instead of Minecraft's
      4-stage material progression -- wood, stone, iron, diamond -- Iron Tale introduces a 6-stage progression. In addition, there
      are a large number of unique weapons and armors that fall between the material grades. In addition, armor and weapons can
      possess additional characteristics that break apart the linear progression even further. For example, a Wolf Helmet might have
      less armor than a copper chainmail helm, but it provides a 10% bonus to damage.
      </p>
      <p>
      Additionally, players can choose to specialize in a combat area. These range from two-handed to using a bow to wielding magic and
      a weapon at the same time. Each combat specialization offers unique bonuses that distinguish each fighting style further. For example,
      sword-and-shield provides a defense bonus while wielding magic and a weapon at the same time yields a bonus in mana recovery rate.
      On top of the style of fighting, each type of weapon (axe, sword, box, etc) has their own skill that makes it beneficial to
      pick a weapon and stick with it. Auxillary skills like Tactics and Focus are also present, which apply to several different combat
      styles and help provide further separation between experienced players using a new skill and players who have no skillbase.
      </p>
      <p>
      Special attention is provided to crafting in Iron Tale. There are 3 major crafting skills, and each are incredibly powerful.
      Armor and Weapons made using Smithing are on par or better than what you can get from the equivalent level'ed quests. Cooking
      provides food items with much more impact than what you can buy. Fashioning items are essential for either of the other two
      crafting professions and for archers. Because crafting is so important, gathering professions are too. Lumberjacks, Fishermen,
      Trappers, and Miners all play very important roles in providing the materials needed for the craftsmen to be able to work.
      </p>
      <p>
      The Quests in Iron Tale fall into two categories: main story quests and side quests. The main story quests start out exactly like
      side quests, but eventually lead the player around the world. Side quests usually revolve around a city's needs, or in the
      personal affairs of a citizen. All four of the starting cities have unique main-story quests, but they all eventually lead to
      the same line of quests. In this way, however, the player gains a different starting to their adventure, and may have different
      feelings about the story itself. Additionally, players will be armed differently.
      </p>
      <p>
      Locations throughout Iron Tale differe greatly. There are lightly wooded areas. There are plains. There are mountain passes, deep
      caves, and expansive deserts. Players may find themselves on the frozen island Yozden, or deep in the Everwoods. Each location
      has different enemies, from zombies and drowened corposes to stone golems. Naturally, areas the player visits later in the
      main story have higher levels and are more difficult. 
      </p>
      <p>
      Iron Tale has been developed along side QuestManager. As a result, Iron Tale is in version 1.4 (or expansion 4). It has been
      deployed on the New Mexico Tech's Minecraft Club Server as well as a local server I run. The server files are available upon
      request.
      </p>
    </fulldesc>
    <urltag>irontale</urltag>
    <screenshots>
      <screenshot>
        <src>images/questmanager_front.png</src>
        <tag>QuestManager</tag>
        <alt>Dark Dungeon</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_16.png</src>
        <tag>QuestManager</tag>
        <alt>Large-Scale Towns and Cities</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_18.png</src>
        <tag>QuestManager</tag>
        <alt>Horra Dungeon's Skids</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_19.png</src>
        <tag>QuestManager</tag>
        <alt>Horra Cathedral</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_20.png</src>
        <tag>QuestManager</tag>
        <alt>The City in the Mountains, Hoax</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_21.png</src>
        <tag>QuestManager</tag>
        <alt>Sarahast Desert</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_22.png</src>
        <tag>QuestManager</tag>
        <alt>Fayden Temple</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_24.png</src>
        <tag>QuestManager</tag>
        <alt>Lake Ingles</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_25.png</src>
        <tag>QuestManager</tag>
        <alt>Valencia Forest</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_26.png</src>
        <tag>QuestManager</tag>
        <alt>The Everwoods</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_27.png</src>
        <tag>QuestManager</tag>
        <alt>Ice Structures in Kleedon</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_28.png</src>
        <tag>QuestManager</tag>
        <alt>Ship Destined for Yozden</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_29.png</src>
        <tag>QuestManager</tag>
        <alt>Icy Landscapes of Yozden</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_30.png</src>
        <tag>QuestManager</tag>
        <alt>Snow Fall on Valencian Outpost</alt>
      </screenshot>
    </screenshots>
  </proj>
  <proj>
    <title>Aechoes</title>
    <url>http://www.github.com/dove-bren/Aechoes</url>
    <urltag>aechoes</urltag>
    <tagline>Strategy RPG in Unreal</tagline>
    <classification>Hobby</classification>
    <descs>
      <desc>Turn-Based RPG created using Unreal 4.14</desc>
      <desc>Majority of code written in C++ for performance and simplicity</desc>
    </descs>
    <tags>
      <tag>Game</tag>
      <tag>C++</tag>
      <tag>Unreal</tag>
      <tag>Strategy</tag>
      <tag>Turn-Based</tag>
    </tags>
    <img>images/aechoes_front.png</img>
    <longdesc>
      Aechoes is a turn-based cell-based strategy RPG made in Unreal. It's very early in development, but
      will emphasize character progression and challenging combat.
    </longdesc>
    <fulldesc>
    <p>
    Aechoes is a game I'm currently developing using Unreal Engine 4.14. The game will revolve around it's challenging
    and engaging combat mechanics. Additionally, the game will focus on character development: how you choose to
    level your character up matters!
    </p>
    <p>
    Currently, Aechoes is in a very primitive state. The backbone of the combat system is where I'm working as of
    writing this. Since combat plays a crucial role in the game, I want to spend a lot of time working through it
    and making it everything I want it to be.
    </p>
    </fulldesc>
  </proj>
  <proj>
    <title>Juggernaut's Armory</title>
    <url>http://www.github.com/dove-bren/Juggernaut-Armory</url>
    <classification>Hobby</classification>
    <tagline>Minecraft Combat Mechanic Overhaul</tagline>
    <descs>
      <desc>Minecraft combat rehaul</desc>
      <desc>Minecraft mod, implemented through the Forge API</desc>
      <desc>Splits damage into slashing, crushing, and piercing types</desc>
      <desc>Expands on armor and weapon progression</desc>
      <desc>Provides extensive APIs and configuration options for developers and server admins</desc>
      <desc>Introduces forging process, including: smelting, shaping, and quenching metals</desc>
    </descs>
    <tags>
      <tag>Mod</tag>
      <tag>Java</tag>
      <tag>Forge</tag>
      <tag>Mechanics</tag>
      <tag>Forging</tag>
      <tag>Combat Mechanics</tag>
      <tag>Integratable</tag>
      <tag>Minecraft</tag>
    </tags>
    <img>images/jarmory_1.png</img>
    <urltag>jarmory</urltag>
    <longdesc>
    Juggernaut's Armory rehauls Minecraft's Combat Mechanics by diversifying damage and armor types. It also provides
    more room for progression in the damage calculations, and eliminates a strict 'best armor'. Players are able to
    construct their own armor piece-by-piece and craft weapons to target specific weaknesses.
    </longdesc>
    <fulldesc>
    <p>
      Jaggernaut's Armory is a Forge Mod that introduced a much heavier style of damage, armor, and weapons to Minecraft. Armor
      progression in Vanilla Minecraft is very limited -- a maximum of 20 armor points with a capped damage reduction value. In 1.8
      mechanics, this equates to a flat 80% damage reduction, in steps of 4%. While protection enchantments provide further
      modification and variation, the progression is very linear. In addition, there are no checks and balances to armor (like
      drawbacks for using diamond against iron or gold). Becaues of this, the player simply wears diamond armor as soon as they can,
      and have no need to ever consider again what they're wearing. Juggernaut's Armory (Jarmory) seeks to remedy this in two ways;
      split damage into multiple types, and provide much closer customization of armor. 
      </p>
      <subhead>
      Damage Types
      </subhead>
      <p>
      JARMORY splits damage and protection into different damage types. By default, these are the classic Slashing, Crushing, and
      Piercing damage. In addition, Magic and Other damages are also defined to directly correspond to the respective damage types
      from Vanilla. By doing so, damage and protection amounts are allowed to very in more than a single dimension, which allows
      developers much more freedom when deciding the details of armors and weapons. This added variation enables developers to
      hand-tune where exactly a piece of armor excels, and where it doesn't. In this way, armor and weapons become better balanced,
      and nonlinearity introduced to armor and weapon progression. Both armor and weapons use the split damage types.
      </p>
      <p>
      Each damage type corresponds to different types of weapons and actions. These are:
      </p>
      <list>
        <li>Slashing* - Typical bladed damage. Swords are a good example of where slashing damage comes from. Slashing damage can
        also be found on axes (to a smaller degree).</li>
        <li>Crushing* - Damage from bash attacks or explosions. Punching with fists (including monster bashes to a player) are
        crushing damage. Shovels do pure crushing damage.</li>
        <li>Piercing* - Attacks that pierce (or stab) do piercing damage. The easiest example is arrows -- whether shot with a bow
        or stabbed at by hand.</li>
        <li>Magic - Damage by potions and special damage events. Can also be used by magic mods.</li>
        <li>Other - Damage that doesn't fit into another category. In other words, special damage, like void damage or suffocation.</li>
      </list>
      <p>
      * - the damage type is one of the 3 major types. This means that default vanilla handling (see section below) automatically
      places damage into these categories.
      </p>
      <p>
      Armor protection values and weapon damage values can be viewed like they normally can: simply mouse-over any piece of
      equipment. The damage values are in the tooltips. Protection/damage values for each type are displayed as per the client's
      config.
      </p>
      <subhead>
      Customization of Armor (and Weapons)
      </subhead>
      <p>
      In Vanilla Minecraft, there are only four equipment slots. Jarmory expands on the customizability of the player by expanding on these, by breaking each of these four equipment pieces into a number of components. Each component acts as a modular addition to the piece of equipment itself, combining its strength with it's fellow components to make a single piece of equipment. The components that make up each piece of armor varies per piece -- from left and right vambraces on the chestplate to the Sabatons on your boots. Each component can be made up of different materials, and not all pieces are required to have a functional piece of armor. 
      </p>
      <p>
      Total armor value for each piece of armor is a simple sum of the protection values of all of it's components. There are two major considerations when determining the armor values of a component: the material it's made out of, and what piece it is. Some pieces provide more protection that others. Take, for example, the breastplate in the torso armor piece. The breastplate provides a large chunk of the overall protection, with each pauldron and vambrace producing smaller amounts. Each piece varies in how large it's contribution to the overall protection is on a per-damage-type basis. Some pieces are very important for protecting against slashing, but not piercing or crushing. Different materials excel and suffer against different damage types as well. As a result, a piece of armor made entirely of the same material might not be as effective as a piece made of several different parts carefully selected for each piece.
      </p>
      <p>
      Creating Components
      </p>
      <p>
      Components are created by hand and individually by the player. Each piece requires, in broad terms: 1. Aquiring metals to construct components out of 2. Smelting the metals down in the forge 3. Taking the molten metal and shaping it on an anvil and cutting table 4. Cooling the metal in a trough to finalize the product
      </p>
      <p>
      Jarmory adds several blocks and mechanics to allow the player to perform all of the above. Forge and Brazier blocks are added to construct a Forge construct. This takes metals and melts them down. Tongs are added to allow the player to move the molten metal while it's still hot. A smith's anvil and cutting table allow the player to hammer out and shape metal to the desired shape. Troughs store coolants that quickly cool the shaped metal to produce the component.
      </p>
      <p>
      Armor components are then taken to an armor mannequin (similar to an armor stand) where pieces are added, removed, and swapped from equipment meshes. Weapon components are brought together and assembled on a Weapon Rig. 
      </p>
      <subhead>
      Support for Vanilla
      </subhead>
      <p>
      Because all the new damage types are not native to Vanilla, Vanilla weapons and armor are not set up to use them. To combat this, vanilla items, weapons, and armors are assigned default values based on the type of item they are. For example, swords do their vanilla damage amount, but purely in slashing. Axes have the same attack power they had before, but split between slashing and crushing.
      </p>
      <p>
      Vanilla armor is affected in a similar way. However, armor is a little harder to break down systematically based solely on the armor type. Armor is separated by applying a linear transformation of the default protection type into each main category. This value is a server-side configured value, but defaults to 70%. This means that a piece of armor that has 10 protection will instead have 7 protection in slashing, piercing, and crushing.
      </p>
      <p>
      Finally, armor and weapons that are added by other mods that do not used the defined APIs to provide custom values (see below) are treated the same as Vanilla items.
      </p>
      <subhead>
      Interfacing with Jarmory
      </subhead>
      <p>
      There are two major ways to interface with Jarmory: through configuration (both server-side and client-side. See below) and through the mod API's. For information on the configurations, see below.
      </p>
      <p>
      There are a large number of APIs to allow mods to work very closely with Jarmory. Mods can register their weapons and armor with Jarmory for finely-tuned protection and damage values. As fluids are added, they can be registered to be used as coolants. Different types of fuels can be added. Metals and materials added by other mods can be set up to be usable in the creation of components. Entirely different weapon types can be added. The list goes on and on.
      </p>
      <p>
      Much of the specifics of the interfaces can be found attached the actual API classes. In place of an exhaustive description of each API, here is a list of each API. More information on each can be found on the project's github page (linked above).
      </p>
      <list>
      <li>Weapon API - Used to register weapons with specific damage values</li>
      <li>Armor API - Like the Weapon API, but with Armor</li>
      <li>Metals &amp; Materials - Register custom metals and materials for use in component crafting</li>
      <li>Alloying API - Specify how alloyed materials are made</li>
      <li>Component API - Add recipes for new components</li>
      <li>Custom Armor Pieces* - Create new pieces of armor, with their own set of components</li>
      <li>Custom Weapons - Define new weapon types and the pieces that make them up</li>
      <li>Fuel API - Register fuels that can be used with the braziers (and optionally the forge)</li>
      <li>Coolant API - Define fluids that can be used as coolants and how well they work</li>
      </list>
      <p>
      * - The ArmorPiece API is not an official API. Developers can still create and define new armor pieces and their list of components, but do so in a less-defined manner
      </p>
      <p>
      All of the above API's are expected to be used during the init phase. Doing so before will almost certainly cause Null Pointer Exceptions, and doing so after is not gauranteed to catch your additions before creating caches. While some APIs (like the Weapon API) are very tolerant to changes during execution, no support is available for making modifications later than the init phase.
      </p>
      <subhead>
      Configuration (Server)
      </subhead>
      <p>
      Aside from mod developers, server administrators can also specify exactly how several different components of Jarmory works. Changes made in configuration do not add or specify new things, but dictate exactly how things should operate and what assumptions should be made. For example, serverside configuration dictates at what rate non-defined (vanilla or armor added by other mods that do not register with Jarmory) armor is converted into the respected armor categories. The default value is 70% (so armor with 10 protection ends up with 7 protection in Slashing, Piercing, and Crushing damage types). This value, however, is set through configuration.
      </p>
      <p>
      Jarmory automatically syncronizes all server-side configurations with clients as they connect. This works in single-player mode as well as when running a dedicated server. All properties that are server-bound are located in the dedicated Server section of the config file.
      </p>
      <p>
      As usual, running the mod for the first time creates all neccessary config files with default values. It's recommended you do this to generate the config file before making edits.
      </p>
      <p>
      Descriptions for each config can be found in the generated config file. Please see that for a list of configurable options. (it's changing rapidly in development, so that list will be much more up-to-date than anything I could put here!)
      </p>
      <subhead>
      Configuration (Client)
      </subhead>
      <p>
      Not all configuration is server-bound. Individual configurations are also available. These generally apply to visual preferences, like displaying armor values of 0.0 or hiding them. Like the server configurations, a list of available options can be found in the config file along with descriptions of what they do.
      </p>
      <p>
      In-game modification of the config is available as well. Simply press [ESC] to go to the Minecraft menu, select Mod Options, and select Jarmory.
      </p>
      <p>
      This project description was taken from Jarmory's GitHub README. To view it in markdown (with all of the links), visit
      the GitHub repo by using the link at the top of the page.
      </p>
    </fulldesc>
    <screenshots>
      <screenshot>
        <src>images/jarmory_1.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>The Smith's Anvil</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_2.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Hand-Modeled Blocks</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_3.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Added Materials</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_4.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Guide Books</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_5.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Component Recipes</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_6.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Unique Burning Mechanic</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_7.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Melt Metals To Forge Them</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_8.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Use Tongs To Hold Metal</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_9.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Forge Interface</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_10.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Melt Metals At The Right Temperature</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_11.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Collect Melted Metal For Alloys</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_12.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Tong HUD</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_13.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Shape Hot Metal</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_14.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Cool Metal In Troughs</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_15.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Assemble Armor Piece By Piece</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_16.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Failed Creations Are Scrap</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_17.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Mix-n-Match Equipment Components</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_18.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Added Mechanics Work With Vanilla, Too</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_19.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Swords Do Slashing Damage</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_20.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Mixed Damage Types</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_21.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Mix-N-Match Pieces. Every piece is swappable.</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_22.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>From full-iron to full-bronze to somewhere inbetween</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_23.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Customize appearance of each piece</alt>
      </screenshot>
    </screenshots>
  </proj>
  <proj>
    <title>Age Of Titans</title>
    <url>http://www.github.com/dove-bren/AgeOfTitans</url>
    <classification>Club Work</classification>
    <descs>
      <desc>Adds large titans for added difficulty</desc>
      <desc>Provides challenge even for experienced players</desc>
      <desc>Integrates with <a href="http://www.minecraftforum.net/forums/mapping-and-modding/minecraft-mods/2218638-tinkers-construct-2">
      Tinker's Construct</a> and <a href="http://www.minecraftforum.net/forums/mapping-and-modding/minecraft-mods/1292130-thaumcraft-5-2-4-updated-2016-3-17">
      Thaumcraft</a></desc>
      <desc>Used in Age of Titans Modpack for the NMT Minecraft Club Modded Server</desc>
    </descs>
    <tags>
      <tag>Mod</tag>
      <tag>Java</tag>
      <tag>Forge</tag>
      <tag>Titans</tag>
      <tag>Difficult</tag>
      <tag>Club</tag>
      <tag>Tinkers Construct</tag>
      <tag>Thaumcraft</tag>
      <tag>Integration</tag>
    </tags>
    <img>images/ageoftitans_4.png</img>
    <urltag>ageoftitans</urltag>
    <longdesc>
    Minecraft Forge Mod which adds Titans to the game. Titans are incredibly strong, and can even break down your walls! Age of Titans
    is the central mod to the NMT Minecraft Club Server's Age of Titans mod pack.
    </longdesc>
    <fulldesc>
      
    </fulldesc>
    <screenshots>
      <screenshot>
        <src>images/ageoftitans_0.png</src>
        <tag>Age Of Titans</tag>
        <alt>Titan Mob</alt>
      </screenshot>
      <screenshot>
        <src>images/ageoftitans_1.png</src>
        <tag>Age Of Titans</tag>
        <alt>Flesh Titan Mob</alt>
      </screenshot>
      <screenshot>
        <src>images/ageoftitans_2.png</src>
        <tag>Age Of Titans</tag>
        <alt>Titarillium, Titan Amalgam, Vectorium, and Crystal Vinteum</alt>
      </screenshot>
      <screenshot>
        <src>images/ageoftitans_3.png</src>
        <tag>Age Of Titans</tag>
        <alt>Tinker's Construct Integration</alt>
      </screenshot>
      <screenshot>
        <src>images/ageoftitans_4.png</src>
        <tag>Age Of Titans</tag>
        <alt>Thaumcraft Integration</alt>
      </screenshot>
      <screenshot>
        <src>images/ageoftitans_5.png</src>
        <tag>Age Of Titans</tag>
        <alt>Full Set Of Thaumcraft Researches</alt>
      </screenshot>
    </screenshots>
  </proj>
  <proj>
    <title>Quest Maker</title>
    <url>http://www.github.com/dove-bren/QuestMaker</url>
    <classification>Hobby</classification>
    <descs>
      <desc>Quest File Editor</desc>
      <desc>Java Application using JSwing, specifically for QuestManager</desc>
      <desc>Provides GUI interface for quest configuration creation and editing</desc>
      <desc>Convenience software for QuestManager users who don't want to edit configs</desc>
    </descs>
    <tags>
      <tag>Application</tag>
      <tag>Java</tag>
      <tag>JSwing</tag>
      <tag>Massive</tag>
      <tag>MMORPG</tag>
      <tag>QuestManager</tag>
      <tag>Minecraft</tag>
    </tags>
    <img>images/questmaker_3.png</img>
    <urltag>questmaker</urltag>
    <longdesc>
    The QuestManager framework requires a lot of config editing. To address some of the strain, Quest Maker provides a GUI interface
    to the config editing process. The software takes entire projects into consideration, and allows for graphical creation of all
    forms of config involved with a QuestManager world.
    </longdesc>
    <screenshots>
      <screenshot>
        <src>images/questmaker_1.png</src>
        <tag>Quest Maker</tag>
        <alt>Application Home Screen</alt>
      </screenshot>
      <screenshot>
        <src>images/questmaker_2.png</src>
        <tag>Quest Maker</tag>
        <alt>Quest Creation Dialogue</alt>
      </screenshot>
      <screenshot>
        <src>images/questmaker_3.png</src>
        <tag>Quest Maker</tag>
        <alt>Project Settings</alt>
      </screenshot>
      <screenshot>
        <src>images/questmaker_4.png</src>
        <tag>Quest Maker</tag>
        <alt>Spell Creation Dialogue</alt>
      </screenshot>
      <screenshot>
        <src>images/questmaker_5.png</src>
        <tag>Quest Maker</tag>
        <alt>Adding an Effect to a Spell</alt>
      </screenshot>
      <screenshot>
        <src>images/questmaker_6.png</src>
        <tag>Quest Maker</tag>
        <alt>Editing Status Effect on Spell</alt>
      </screenshot>
    </screenshots>
  </proj>
  <proj>
    <title>COOL Compiler</title>
    <urltag>coolcomp</urltag>
    <tagline>Complete compiler for the language COOL</tagline>
    <classification>Coursework</classification>
    <descs>
      <desc>Front-to-back end Compiler</desc>
      <desc>Uses Flex and Bison for lexing and parsing</desc>
      <desc>Use common Intermediate Representations such as an AST</desc>
      <desc>Performs regular semantic analysis, including type checking and valid dispatch checks</desc>
    </descs>
    <tags>
      <tag>Compiler</tag>
      <tag>C++</tag>
      <tag>Coursework</tag>
      <tag>COOL</tag>
      <tag>Language</tag>
      <tag>Object Oriented</tag>
      <tag>Lexing</tag>
      <tag>Parsing</tag>
      <tag>Semantic Analysis</tag>
      <tag>Code Generation</tag>
      <tag>x86 Assembly</tag>
    </tags>
    <!-- <img>images/compiler_front.png</img> -->
    <longdesc>
      C++ compiler which transforms Standford's Object-Oriented COOL language into x86 assembly. Input code is taken through all steps
      of a modern compiler, except assembly. 
    </longdesc>
    <fulldesc>
      <p>
      NMT's capstone C.S. course is Compiler Writing. In it, students are formed into teams, and expected to produce a compiler
      that takes code from input source code to valid assembly. Our class was assigned the input code COOL, and instructed
      to produce x86-64 assembly code.
      </p>
      <p>
      Code is first ran through Flex (a lexer) and then Bison (a parser). Each of these tools required configuration for the input
      language. Special language features, like COOL's nested comments, had to be dealt with carefully to ensure that the lexing
      and parsing correctly evaluated the input code and preserved the meaning as defined by the language. As tokens were passed
      to Bison from Flex, we constructed an AST on the input code. The output AST was then fed through to semantic analysis.
      </p>
      <p>
      To perform semantic analysis, we used a visitor pattern and a series of visitors to perform a variety of passes. This included
      type checking (with type-inferencing and symbol-table insertions), checking that dispatches were valid (named an actual method,
      parameters were of right type, etc), and making sure that variables were declared before use. Data obtained during these passes
      were stored either in the AST, the symbol table, or a special class table that held class-specific information.
      </p>
      <p>
      Upon passing semantic analysis, all aquired data was passed to code generation. Here, each node in the AST was used to create
      pieces of a Linear Intermediate Representation (LIR) that more closely represented the assembly we were outputting to. Our LIR
      was a quadruples LIR, and held instructions very similar to those available in x86-64 assembly. The produced LIR was then
      passed over to expand inline variables with runtime data locations. Then, the LIR was transformed into output assembly.
      </p>
      <p>
      Code Generation also houses a small number of optimizations. These optimizations were
      </p>
      <list>
      <li>Constant Propagation and Folding</li>
      <li>Dead/Unreachable Code Elimination</li>
      <li>Loop Unswitching</li>
      <li>Loop Unrolling</li>
      <li>Strength Reduction</li>
      </list>
      <p>
      Special care was given to the order in which each optimization was performed. In addition, all optimizations (except Strength
      reduction) were performed before transforming the AST into an LIR.
      </p>
      <p>
      One design decision we made as a team was to generate multiple smaller LIRs rather than one big one. Since COOL is made up
      entirely of methods (including initialization code of classes, if you wrap them into an 'init' method like we did), we
      decided each method body would be it's own LIR. We used a simple map data structure to map between methods and LIRs. Breaking
      the LIRs up like this helped make code generation much smoother. Rearranging method code placement was very straightforward.
      Evaluating an LIR at a procedural level was implicit. Adding regular procedure prefix and postfix code could be done systematically.
      </p>
      <p>
      Because this project was done as coursework (and a similar assignment will be made in the future), the code is not available
      as open source. However, a copy is available upon request.
      </p>
    </fulldesc>
  </proj>
  <proj>
    <title>Victim Cache Simulation</title>
    <urltag>bullycache</urltag>
    <tagline>Simulation of a Victim Cache</tagline>
    <classification>Coursework</classification>
    <descs>
      <desc>Simplified simulation of a cache with victim cache</desc>
      <desc>Uses 32KB Direct-Mapped Cache with variable-sized victim cache</desc>
      <desc>Allows use of different replacement policies</desc>
      <desc>Runs off traces</desc>
    </descs>
    <tags>
      <tag>Cache</tag>
      <tag>C++</tag>
      <tag>Coursework</tag>
      <tag>Simulation</tag>
      <tag>Victim</tag>
      <tag>Object Oriented</tag>
      <tag>Traces</tag>
      <tag>Command-Line Application</tag>
    </tags>
    <!-- <img>images/cachesim_front.png</img> -->
    <longdesc>
      Simulation of a 32KB direct-mapped cache with a variably-sized victim cache. Simulation is trace-driven, and produces
      summary statistics of the input trace and config. Victim cache is configurable.
    </longdesc>
    <fulldesc>
      <p>
      Victim caches work to alleviate the problem of direct-mapped cache -- associativity. They provide a sort of side-storage
      that allows direct-mapped caches to deal with a small number of cache collisions while still having the speed of a
      direct-mapped cache.
      </p>
      <p>
      This project builds off of a C interface provided by the instructor. All code written by me is C++ code, and can be found
      in .cpp files. These include:
      </p>
      <list>
        <li>victimcachesim.cpp/h</li>
        <li>common.cpp/h</li>
        <li>cache.cpp/h></li>
        <li>bullycache.cpp/h</li>
        <li>cacheset.cpp/h</li>
        <li>cacheline.cpp/h</li>
      </list>
      <p>
      Because this project was done as coursework (and a similar assignment will be made in the future), the code is not available
      as open source. However, a copy is available upon request.
      </p>
    </fulldesc>
  </proj>
  <!--
  <proj>
    <title>Quest Maker</title>
    <url>http://www.github.com/dove-bren/QuestMaker</url>
    <urltag>questmanager</urltag>
    <tagline></tagline>
    <classification>Hobby</classification>
    <descs>
      <desc>Quest File Editor</desc>
      <desc>Java Application using JSwing, specifically for QuestManager</desc>
      <desc>Provides GUI interface for quest configuration creation and editing</desc>
      <desc>Convenience software for QuestManager users who don't want to edit configs</desc>
    </descs>
    <tags>
      <tag>Application</tag>
      <tag>Java</tag>
      <tag>JSwing</tag>
      <tag>Massive</tag>
      <tag>MMORPG</tag>
      <tag>QuestManager</tag>
      <tag>Minecraft</tag>
    </tags>
    <img>images/questmaker_3.png</img>
    <longdesc>
      desc
    </longdesc>
    <fulldesc>
    
    </fulldesc>
    <screenshots>
      <screenshot>
        <src>images/questmaker_6.png</src>
        <tag>Quest Maker</tag>
        <alt>Editing Status Effect on Spell</alt>
      </screenshot>
    </screenshots>
  </proj>
  -->
</projects>
